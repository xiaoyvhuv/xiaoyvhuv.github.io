<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>前端 on XingSiyv'sBlog</title><link>https://xiaoyvhuv.github.io/tags/%E5%89%8D%E7%AB%AF/</link><description>Recent content in 前端 on XingSiyv'sBlog created by</description><generator>Hugo -- gohugo.io</generator><language>zh</language><lastBuildDate>Thu, 06 Feb 2025 12:03:30 +0800</lastBuildDate><atom:link href="https://xiaoyvhuv.github.io/tags/%E5%89%8D%E7%AB%AF/index.xml" rel="self" type="application/rss+xml"/><item><title>计算机网络面试题汇总与解析：三次握手与四次挥手</title><link>https://xiaoyvhuv.github.io/blog/first/</link><pubDate>Thu, 06 Feb 2025 12:03:30 +0800</pubDate><guid>https://xiaoyvhuv.github.io/blog/first/</guid><description>&lt;p>Hello! &amp;#x1f44b;在网络通信和面试场景中，TCP协议的三次握手与四次挥手是必考的核心知识点。本文从面试题角度出发，结合底层原理和实际场景，整理高频问题并提供深度解析。&lt;/p>
&lt;hr>
&lt;h3 id="一基础概念与流程">一、基础概念与流程&lt;/h3>
&lt;h4 id="1-三次握手过程">&lt;strong>1. 三次握手过程&lt;/strong>&lt;/h4>
&lt;p>&lt;strong>问题&lt;/strong>：请描述TCP三次握手的具体流程。&lt;br>
&lt;strong>答案&lt;/strong>：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>SYN&lt;/strong>：客户端发送&lt;code>SYN=1, seq=x&lt;/code>报文，进入&lt;code>SYN_SENT&lt;/code>状态。&lt;/li>
&lt;li>&lt;strong>SYN-ACK&lt;/strong>：服务端返回&lt;code>SYN=1, ACK=1, seq=y, ack=x+1&lt;/code>，进入&lt;code>SYN_RCVD&lt;/code>状态。&lt;/li>
&lt;li>&lt;strong>ACK&lt;/strong>：客户端发送&lt;code>ACK=1, seq=x+1, ack=y+1&lt;/code>，双方进入&lt;code>ESTABLISHED&lt;/code>状态。&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>解析&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>核心目标&lt;/strong>：同步初始序列号（ISN），确保双方收发能力正常。&lt;/li>
&lt;li>&lt;strong>为何是三次？&lt;/strong> 避免历史重复连接的初始化（如延迟的旧SYN报文），同时确保双方确认彼此的收发能力。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h4 id="2-四次挥手过程">&lt;strong>2. 四次挥手过程&lt;/strong>&lt;/h4>
&lt;p>&lt;strong>问题&lt;/strong>：为什么断开连接需要四次挥手？&lt;br>
&lt;strong>答案&lt;/strong>：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>FIN&lt;/strong>：主动关闭方（如客户端）发送&lt;code>FIN=1&lt;/code>，进入&lt;code>FIN_WAIT_1&lt;/code>。&lt;/li>
&lt;li>&lt;strong>ACK&lt;/strong>：被动关闭方（如服务端）返回&lt;code>ACK&lt;/code>，进入&lt;code>CLOSE_WAIT&lt;/code>，客户端进入&lt;code>FIN_WAIT_2&lt;/code>。&lt;/li>
&lt;li>&lt;strong>FIN&lt;/strong>：服务端处理完数据后发送&lt;code>FIN=1&lt;/code>，进入&lt;code>LAST_ACK&lt;/code>。&lt;/li>
&lt;li>&lt;strong>ACK&lt;/strong>：客户端返回&lt;code>ACK&lt;/code>后进入&lt;code>TIME_WAIT&lt;/code>，服务端关闭。&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>解析&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>四次的原因&lt;/strong>：TCP是全双工协议，需双方独立关闭通道。被动方可能需要时间处理剩余数据，因此ACK和FIN分开发送。&lt;/li>
&lt;li>&lt;strong>TIME_WAIT的作用&lt;/strong>：确保最后一个ACK能被接收（防止因丢包导致服务端重传FIN），同时让旧连接的报文在网络中消散（2MSL时间）。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="二高频进阶问题">二、高频进阶问题&lt;/h3>
&lt;h4 id="1-握手时syn洪泛攻击是什么如何防御">&lt;strong>1. 握手时SYN洪泛攻击是什么？如何防御？&lt;/strong>&lt;/h4>
&lt;p>&lt;strong>答案&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>攻击原理&lt;/strong>：攻击者伪造大量SYN报文但不回复ACK，耗尽服务端资源（半连接队列）。&lt;/li>
&lt;li>&lt;strong>防御手段&lt;/strong>：
&lt;ul>
&lt;li>启用&lt;code>SYN Cookie&lt;/code>机制（通过哈希计算验证请求合法性，不占用队列）。&lt;/li>
&lt;li>限制半连接队列大小或缩短SYN超时时间。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h4 id="2-大量close_wait状态的可能原因">&lt;strong>2. 大量CLOSE_WAIT状态的可能原因？&lt;/strong>&lt;/h4>
&lt;p>&lt;strong>答案&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>现象&lt;/strong>：服务端存在大量&lt;code>CLOSE_WAIT&lt;/code>状态连接。&lt;/li>
&lt;li>&lt;strong>原因&lt;/strong>：应用程序未正确调用&lt;code>close()&lt;/code>方法，导致服务端无法发送FIN报文。&lt;/li>
&lt;li>&lt;strong>解决&lt;/strong>：检查代码逻辑（如未关闭Socket、线程阻塞等）。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h4 id="3-握手阶段能否携带数据">&lt;strong>3. 握手阶段能否携带数据？&lt;/strong>&lt;/h4>
&lt;p>&lt;strong>答案&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>第三次握手可以携带数据&lt;/strong>：此时连接已建立，客户端确认服务端的收发能力。&lt;/li>
&lt;li>&lt;strong>前两次不能&lt;/strong>：若SYN报文携带数据，可能被恶意攻击者利用（如放大攻击）。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h4 id="4-time_wait状态为什么要等待2msl">&lt;strong>4. TIME_WAIT状态为什么要等待2MSL？&lt;/strong>&lt;/h4>
&lt;p>&lt;strong>答案&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>MSL（Maximum Segment Lifetime）&lt;/strong>：报文最大生存时间（通常30秒-2分钟）。&lt;/li>
&lt;li>&lt;strong>2MSL的意义&lt;/strong>：
&lt;ul>
&lt;li>确保被动方的FIN重传能被响应（若ACK丢失，被动方会重发FIN）。&lt;/li>
&lt;li>让旧连接的报文在网络中失效，避免与新连接冲突。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="三实战场景与异常分析">三、实战场景与异常分析&lt;/h3>
&lt;h4 id="1-服务端出现大量time_wait连接怎么办">&lt;strong>1. 服务端出现大量TIME_WAIT连接怎么办？&lt;/strong>&lt;/h4>
&lt;p>&lt;strong>答案&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>原因&lt;/strong>：短连接频繁创建和关闭（如HTTP短连接）。&lt;/li>
&lt;li>&lt;strong>优化方案&lt;/strong>：
&lt;ul>
&lt;li>使用长连接（如HTTP Keep-Alive）。&lt;/li>
&lt;li>修改内核参数（如&lt;code>net.ipv4.tcp_tw_reuse&lt;/code>和&lt;code>net.ipv4.tcp_tw_recycle&lt;/code>，需谨慎）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h4 id="2-第二次握手丢失会发生什么">&lt;strong>2. 第二次握手丢失会发生什么？&lt;/strong>&lt;/h4>
&lt;p>&lt;strong>答案&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>客户端行为&lt;/strong>：超时后重传SYN报文（指数退避）。&lt;/li>
&lt;li>&lt;strong>服务端行为&lt;/strong>：未收到ACK，停留在&lt;code>SYN_RCVD&lt;/code>状态，直到超时丢弃连接。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h4 id="3-如果服务端直接断电tcp连接如何关闭">&lt;strong>3. 如果服务端直接断电，TCP连接如何关闭？&lt;/strong>&lt;/h4>
&lt;p>&lt;strong>答案&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>无FIN报文&lt;/strong>：客户端通过心跳机制（如Keep-Alive）检测到连接失效，主动发送RST复位连接。&lt;/li>
&lt;li>&lt;strong>未启用心跳&lt;/strong>：客户端可能长时间保持&lt;code>ESTABLISHED&lt;/code>状态，直到应用层超时。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="四总结与面试技巧">四、总结与面试技巧&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>理解状态转换图&lt;/strong>：熟记TCP的11种状态（如&lt;code>SYN_SENT&lt;/code>、&lt;code>TIME_WAIT&lt;/code>）及转换条件。&lt;/li>
&lt;li>&lt;strong>结合实际场景&lt;/strong>：如高并发下的连接管理、服务器参数调优。&lt;/li>
&lt;li>&lt;strong>扩展知识&lt;/strong>：对比UDP的无连接特性，理解TCP的可靠性设计（如序列号、超时重传）。&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>面试提示&lt;/strong>：回答时结合抓包工具（Wireshark）分析握手/挥手过程，展示动手能力。&lt;/p>
&lt;hr>
&lt;p>通过掌握三次握手与四次挥手的底层逻辑和异常处理，不仅能应对面试，更能为实际网络问题排查打下坚实基础。&lt;/p></description></item></channel></rss>